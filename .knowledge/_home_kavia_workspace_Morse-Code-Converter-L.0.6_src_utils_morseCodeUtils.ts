{"is_source_file": true, "format": "TypeScript", "description": "Utility functions for converting text to Morse code and vice versa, including validation methods.", "external_files": [], "external_methods": [], "published": ["textToMorse", "morseToText", "isValidMorseCode", "isValidText"], "classes": [], "methods": [{"name": "textToMorse", "description": "Converts input text to its Morse code representation."}, {"name": "morseToText", "description": "Converts Morse code back to the original text."}, {"name": "isValidMorseCode", "description": "Checks if the provided Morse code string is valid."}, {"name": "isValidText", "description": "Checks if the provided text can be converted to Morse code."}], "calls": [], "search-terms": ["MORSE_CODE_MAP", "REVERSE_MORSE_CODE_MAP", "textToMorse", "morseToText"], "state": 2, "ctags": ["MORSE_CODE_MAP: /^const MORSE_CODE_MAP = {$/;\"", "REVERSE_MORSE_CODE_MAP: /^const REVERSE_MORSE_CODE_MAP = Object.entries(MORSE_CODE_MAP).reduce($/;\"", "isValidMorseCode: /^export const isValidMorseCode = (morse: string): boolean => {$/;\"", "isValidText: /^export const isValidText = (text: string): boolean => {$/;\"", "morsePattern: /^  const morsePattern = \\/^[.\\\\- ]*$\\/;$/;\"", "morseToText: /^export const morseToText = (morse: string): string => {$/;\"", "textToMorse: /^export const textToMorse = (text: string): string => {$/;\""], "filename": "/home/kavia/workspace/Morse-Code-Converter-L.0.6/src/utils/morseCodeUtils.ts", "hash": "10de94e4d12c0db7c8884b159ad97f39", "format-version": 3, "code-base-name": "default"}